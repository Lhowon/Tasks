GETTING TASKS & SPROUTCORE CODE
==============================================================================

Change to the directory where you would like to work on Tasks and type...

git clone git://github.com/sproutit/sproutcore-abbot.git abbot
git clone git://github.com/suvajitgupta/Tasks.git tasks
cd tasks/frameworks
git clone git://github.com/etgryphon/sproutcore-ui.git scui
git clone git://github.com/sproutit/sproutcore.git sproutcore
cd ..

If you don't have the latest Ruby gems, type...

sudo gem install thor


RUNNING PERSEVERE
==============================================================================

To start the Persevere server...

./server-start.sh

To stop the Persevere server...

./server-stop.sh


INITIAL PERSEVERE SETUP
==============================================================================

1) Start the Persevere server (see above).

2) Run a script to create the first user, after which you can log into Tasks
   and use the User Manager GUI:

./user-add.sh 'System Admin' 'SA' 'Manager' localhost:8088
(enter/reenter password and remember it!)

./user-add.sh 'Guest User' 'guest' 'Guest' localhost:8088
(press Enter twice to create a blank password)


RUNNING TASKS
==============================================================================

1) Start the SproutCore server...

../abbot/bin/sc-server --port 4400

2) Navigate to the following URL...

http://localhost:4400/tasks

3) Enter 'SA' in the dialog box and the password you set earlier and press Enter.
   The Tasks GUI should come up.

4) Add a project, add tasks to it, hit Save periodically, have fun!
   Alternatively, to get some sample data to play with, you can click
   on the Import button and paste in the contents of the file:

apps/tasks/tests/data/import_data.txt


TASKS OVERVIEW
==============================================================================

Welcome to "Tasks!" - it was created for a few reasons:

1. To become a comprehensive sample application that goes beyond  "hello world"
   examples (like "clock") and snippets showing off facets of SproutCore
   (like "drag").  SproutCore is very elegant and powerful framework and my
   goal is to use Tasks to ramp up as well as showcase its capabilities.

2. To illustrate how to engineer a non-trivial application using things like
   a task plan (scope/assignments), wireframes/mockups (vision/GUI design),
   statecharts/MVC structure (technical design), and integration with a remote
   server via REST/JSON.

3. We all build software and "Tasks" can become your agile software management
   tool - you won't need the cumbersome task tracking & bean counting tools
   overhead staff like to justify their existence with :-)

4. SproutCore itself will go through an explosive launch and maturation in
   2009.  During this metamorphosis, Tasks can become the feature/bug tracking
   tool for SproutCore - what better that an application built with SproutCore
   itself!

Tasks is "in progress" - we plan to tinker with it in the coming months and
mature it into the tool we use to manage the development of a very complex
commercial SproutCore application.  I hope you will find Tasks useful as
you start your journey with SproutCore.  Please feel free to send me your
feedback or code contributions!

-Suvajit Gupta (suvajit.gupta@eloqua.com)


TASKS ARTIFACTS
==============================================================================

To start getting oriented with Tasks, scan the following artifacts in the
docs/ folder:

1. TasksPlan.txt: shows the work breakdown and assignments - feel free to pick
   up an item that is not "Done" and hack away at it!

2. TasksWireframe.png: shows the initial GUI design with callouts explaining
   the key functionality.

3. TasksMockup*.png: shows the visual design concepts we used to style Tasks.

4. TasksStatecharts.pdf: shows the states/transitions within the GUI.

5. TasksControllers.pdf: shows how the various controllers are wired together
   and how the views relate to them (implementing thge root controller pattern).

6. TasksAPI.xml: drag this file into your browser - the files in the "include"
   folder render this specification in a nice format for you to understand the
   REST API endpoints.

7. TasksJSON.xml: documents the model object structure for what is sent to the
   server via REST calls.

8. TasksFileFormat.txt: Shows the simple/intuitive syntax for importing data
   into and exporting data from Tasks.  In fact, the TasksPlan.txt is itself
   written in this format and can be imported into Tasks!


TASKS ATTRIBUTIONS
==============================================================================

The filter on/off icons:
Diagona Icons
Copyright (C) 2007 Yusuke Kamiyamane. All rights reserved.
The icons are licensed under a Creative Commons Attribution 3.0 license.

The color indicators on the filter icon, as well as numerous other icons in Tasks:
Silk icon set 1.3
Mark James - http://www.famfamfam.com/lab/icons/silk/


PERSEVERE ADMINISTRATION
==============================================================================

1) Navigate to the following URL to directly manipulate Persevere data:

http://localhost:8088/tasks-server/explorer.html